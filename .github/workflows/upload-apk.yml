name: Generate update.json on release

on:
  release:
    types: [published]

jobs:
  gen_update:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get release info
        id: rel
        uses: actions/github-script@v7
        with:
          script: |
            const tag = context.payload.release.tag_name || ''
            return { tag }

      - name: Download APK asset from release
        id: download_apk
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          TAG=${{ steps.rel.outputs.tag }}
          echo "Tag: $TAG"
          ASSET_URL=$(jq -r '.assets[] | select(.name | test("\\.apk$")) | .browser_download_url' <<< "${{ toJson(github.event.release) }}")
          if [ -z "$ASSET_URL" ]; then
            echo "No APK asset found in release"
            exit 1
          fi
          echo "Asset URL: $ASSET_URL"
          curl -L -o release.apk "$ASSET_URL"

      - name: Compute sha256
        id: hash
        run: |
          SHA=$(sha256sum release.apk | awk '{print $1}')
          echo "sha256=$SHA" >> $GITHUB_OUTPUT

      - name: Prepare update.json
        env:
          RELEASE_BODY: ${{ github.event.release.body }}
          TAG: ${{ steps.rel.outputs.tag }}
          REPO: ${{ github.repository }}
          SHA256: ${{ steps.hash.outputs.sha256 }}
        run: |
          VNAME=${TAG#v}
          VCODE=$(date +%s)
          APK_URL="https://github.com/${REPO}/releases/download/${TAG}/$(basename release.apk)"
          NOTES=$(echo "$RELEASE_BODY" | jq -Rs .)
          mkdir -p docs
          cat > docs/update.json <<EOF
{
  "versionCode": ${VCODE},
  "versionName": "${VNAME}",
  "notes": ${NOTES},
  "apkUrl": "${APK_URL}",
  "sha256": "${SHA256}",
  "minSdk": 28
}
EOF

      - name: Commit and push update.json
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git add docs/update.json
          git commit -m "Update update.json for ${{ steps.rel.outputs.tag }}" || echo "No changes to commit"
          git push origin HEAD:main
